{"ast":null,"code":"// let paper = require('paper');\n// let FileSaver = require('file-saver');\n\n// const setTool = (interaction) => {\n//   const tool = paper.tools.find(tool => tool.name === interaction);\n//   if (tool) {\n//     tool.activate();\n//   } else {\n//     console.error(`Tool with name ${interaction} not found.`);\n//   }\n// };\n\n// function setupPaper(canvasRef) {\n//   // explicitly set the attr width/height\n//   canvasRef.current.height = canvasRef.current.parentElement.height;\n//   canvasRef.current.width = canvasRef.current.parentElement.width;\n//   paper.setup(canvasRef.current);\n//   paper.view.zoom = 1;\n//   return paper;\n// }\n\n// // Translate to readable color name\n// const getColorName = (color) => {\n//   console.log(\"Color received:\", color);\n//   const colorNames = {\n//     \"black\": \"Black\",\n//     \"red\": \"Red\",    \n//     \"blue\": \"Blue\",   \n//     \"green\": \"Green\",  \n//     \"yellow\": \"Yellow\" \n//   };\n\n//   // Convert color to lowercase for consistent comparison\n//   const lowercaseColor = color.toLowerCase();\n\n//   // Check if the color exists in colorNames, return \"Unknown\" if not found\n//   return colorNames[lowercaseColor] || \"thisiswrong\";\n// };\n\n// function exportSVG() {\n//   let prev = paper.view.zoom;\n//   console.log(\"Exporting file as SVG\");\n//   paper.view.zoom = 1;\n//   paper.view.update();\n\n//   // Store grid lines and invisible beads\n//   const gridLines = paper.project.getItems({ name: \"gridLine\" });\n//   const invisibleBeads = paper.project.getItems({ name: \"bead\", visible: false });\n\n//   // Remove grid lines and invisible beads\n//   gridLines.forEach(line => line.remove());\n//   invisibleBeads.forEach(bead => bead.remove());\n\n//   // Get all visible beads and group them by color\n//   const visibleBeads = paper.project.getItems({ name: \"bead\", visible: true });\n//   const beadsByColor = {};\n\n//   visibleBeads.forEach(bead => {\n//     const color = bead.fillColor.toCSS();\n//     if (!beadsByColor[color]) {\n//       beadsByColor[color] = [];\n//     }\n//     beadsByColor[color].push(bead);\n//   });\n\n//   // Create a combined SVG string for all beads\n//   let combinedSVG = '';\n\n//   Object.keys(beadsByColor).forEach(color => {\n//     const beads = beadsByColor[color];\n\n//     // Create a new temp layer\n//     const tempLayer = new paper.Layer();\n\n//     // Add beads of the current color to the temp layer\n//     beads.forEach(bead => {\n//       tempLayer.addChild(bead.clone());\n//     });\n\n//     // Export SVG from temp layer\n//     combinedSVG += tempLayer.exportSVG({ asString: true, precision: 5 });\n\n//     // Remove temp layer\n//     tempLayer.remove();\n//   });\n\n//   // Restore grid lines and invisible beads\n//   gridLines.forEach(line => paper.project.activeLayer.addChild(line));\n//   invisibleBeads.forEach(bead => paper.project.activeLayer.addChild(bead));\n\n//   // Reset zoom\n//   paper.view.zoom = prev;\n\n//   return combinedSVG;\n// }\n\n// export { setupPaper, exportSVG, setTool , getColorName };","map":{"version":3,"names":[],"sources":["/Users/mariahjadegardner/UTA/FA24/Research/string-theory/react-coloring/src/javascripts/Paper.js"],"sourcesContent":["// let paper = require('paper');\n// let FileSaver = require('file-saver');\n\n// const setTool = (interaction) => {\n//   const tool = paper.tools.find(tool => tool.name === interaction);\n//   if (tool) {\n//     tool.activate();\n//   } else {\n//     console.error(`Tool with name ${interaction} not found.`);\n//   }\n// };\n\n// function setupPaper(canvasRef) {\n//   // explicitly set the attr width/height\n//   canvasRef.current.height = canvasRef.current.parentElement.height;\n//   canvasRef.current.width = canvasRef.current.parentElement.width;\n//   paper.setup(canvasRef.current);\n//   paper.view.zoom = 1;\n//   return paper;\n// }\n\n// // Translate to readable color name\n// const getColorName = (color) => {\n//   console.log(\"Color received:\", color);\n//   const colorNames = {\n//     \"black\": \"Black\",\n//     \"red\": \"Red\",    \n//     \"blue\": \"Blue\",   \n//     \"green\": \"Green\",  \n//     \"yellow\": \"Yellow\" \n//   };\n\n//   // Convert color to lowercase for consistent comparison\n//   const lowercaseColor = color.toLowerCase();\n\n//   // Check if the color exists in colorNames, return \"Unknown\" if not found\n//   return colorNames[lowercaseColor] || \"thisiswrong\";\n// };\n\n\n// function exportSVG() {\n//   let prev = paper.view.zoom;\n//   console.log(\"Exporting file as SVG\");\n//   paper.view.zoom = 1;\n//   paper.view.update();\n\n//   // Store grid lines and invisible beads\n//   const gridLines = paper.project.getItems({ name: \"gridLine\" });\n//   const invisibleBeads = paper.project.getItems({ name: \"bead\", visible: false });\n\n//   // Remove grid lines and invisible beads\n//   gridLines.forEach(line => line.remove());\n//   invisibleBeads.forEach(bead => bead.remove());\n\n//   // Get all visible beads and group them by color\n//   const visibleBeads = paper.project.getItems({ name: \"bead\", visible: true });\n//   const beadsByColor = {};\n\n//   visibleBeads.forEach(bead => {\n//     const color = bead.fillColor.toCSS();\n//     if (!beadsByColor[color]) {\n//       beadsByColor[color] = [];\n//     }\n//     beadsByColor[color].push(bead);\n//   });\n\n//   // Create a combined SVG string for all beads\n//   let combinedSVG = '';\n\n//   Object.keys(beadsByColor).forEach(color => {\n//     const beads = beadsByColor[color];\n\n//     // Create a new temp layer\n//     const tempLayer = new paper.Layer();\n\n//     // Add beads of the current color to the temp layer\n//     beads.forEach(bead => {\n//       tempLayer.addChild(bead.clone());\n//     });\n\n//     // Export SVG from temp layer\n//     combinedSVG += tempLayer.exportSVG({ asString: true, precision: 5 });\n\n//     // Remove temp layer\n//     tempLayer.remove();\n//   });\n\n//   // Restore grid lines and invisible beads\n//   gridLines.forEach(line => paper.project.activeLayer.addChild(line));\n//   invisibleBeads.forEach(bead => paper.project.activeLayer.addChild(bead));\n\n//   // Reset zoom\n//   paper.view.zoom = prev;\n\n//   return combinedSVG;\n// }\n\n// export { setupPaper, exportSVG, setTool , getColorName };"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}