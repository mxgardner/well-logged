{"ast":null,"code":"let paper = require('paper');\nlet FileSaver = require('file-saver');\nconst setTool = interaction => {\n  const tool = paper.tools.find(tool => tool.name === interaction);\n  if (tool) {\n    tool.activate();\n  } else {\n    console.error(`Tool with name ${interaction} not found.`);\n  }\n};\nfunction setupPaper(canvasRef) {\n  // explicitly set the attr width/height\n  canvasRef.current.height = canvasRef.current.parentElement.height;\n  canvasRef.current.width = canvasRef.current.parentElement.width;\n  paper.setup(canvasRef.current);\n  paper.view.zoom = 1;\n  return paper;\n}\n\n// Translate to readable color name\nconst getColorName = color => {\n  console.log(\"Color received:\", color);\n  const colorNames = {\n    \"black\": \"Black\",\n    \"red\": \"Red\",\n    \"blue\": \"Blue\",\n    \"green\": \"Green\",\n    \"yellow\": \"Yellow\"\n  };\n\n  // Convert color to lowercase for consistent comparison\n  const lowercaseColor = color.toLowerCase();\n\n  // Check if the color exists in colorNames, return \"Unknown\" if not found\n  return colorNames[lowercaseColor] || \"thisiswrong\";\n};\nfunction exportSVG() {\n  let prev = paper.view.zoom;\n  console.log(\"Exporting file as SVG\");\n  paper.view.zoom = 1;\n  paper.view.update();\n\n  // Store grid lines and invisible beads\n  const gridLines = paper.project.getItems({\n    name: \"gridLine\"\n  });\n  const invisibleBeads = paper.project.getItems({\n    name: \"bead\",\n    visible: false\n  });\n\n  // Remove grid lines and invisible beads\n  gridLines.forEach(line => line.remove());\n  invisibleBeads.forEach(bead => bead.remove());\n\n  // Get all visible beads and group them by color\n  const visibleBeads = paper.project.getItems({\n    name: \"bead\",\n    visible: true\n  });\n  const beadsByColor = {};\n  visibleBeads.forEach(bead => {\n    const color = bead.fillColor.toCSS();\n    if (!beadsByColor[color]) {\n      beadsByColor[color] = [];\n    }\n    beadsByColor[color].push(bead);\n  });\n\n  // Create a combined SVG string for all beads\n  let combinedSVG = '';\n  Object.keys(beadsByColor).forEach(color => {\n    const beads = beadsByColor[color];\n\n    // Create a new temp layer\n    const tempLayer = new paper.Layer();\n\n    // Add beads of the current color to the temp layer\n    beads.forEach(bead => {\n      tempLayer.addChild(bead.clone());\n    });\n\n    // Export SVG from temp layer\n    combinedSVG += tempLayer.exportSVG({\n      asString: true,\n      precision: 5\n    });\n\n    // Remove temp layer\n    tempLayer.remove();\n  });\n\n  // Restore grid lines and invisible beads\n  gridLines.forEach(line => paper.project.activeLayer.addChild(line));\n  invisibleBeads.forEach(bead => paper.project.activeLayer.addChild(bead));\n\n  // Reset zoom\n  paper.view.zoom = prev;\n  return combinedSVG;\n}\nexport { setupPaper, exportSVG, setTool, getColorName };","map":{"version":3,"names":["paper","require","FileSaver","setTool","interaction","tool","tools","find","name","activate","console","error","setupPaper","canvasRef","current","height","parentElement","width","setup","view","zoom","getColorName","color","log","colorNames","lowercaseColor","toLowerCase","exportSVG","prev","update","gridLines","project","getItems","invisibleBeads","visible","forEach","line","remove","bead","visibleBeads","beadsByColor","fillColor","toCSS","push","combinedSVG","Object","keys","beads","tempLayer","Layer","addChild","clone","asString","precision","activeLayer"],"sources":["/Users/mariahjadegardner/UTA/FA24/Research/string-theory/react-coloring/src/javascripts/Paper.js"],"sourcesContent":["let paper = require('paper');\nlet FileSaver = require('file-saver');\n\nconst setTool = (interaction) => {\n  const tool = paper.tools.find(tool => tool.name === interaction);\n  if (tool) {\n    tool.activate();\n  } else {\n    console.error(`Tool with name ${interaction} not found.`);\n  }\n};\n\nfunction setupPaper(canvasRef) {\n  // explicitly set the attr width/height\n  canvasRef.current.height = canvasRef.current.parentElement.height;\n  canvasRef.current.width = canvasRef.current.parentElement.width;\n  paper.setup(canvasRef.current);\n  paper.view.zoom = 1;\n  return paper;\n}\n\n// Translate to readable color name\nconst getColorName = (color) => {\n  console.log(\"Color received:\", color);\n  const colorNames = {\n    \"black\": \"Black\",\n    \"red\": \"Red\",    \n    \"blue\": \"Blue\",   \n    \"green\": \"Green\",  \n    \"yellow\": \"Yellow\" \n  };\n\n  // Convert color to lowercase for consistent comparison\n  const lowercaseColor = color.toLowerCase();\n\n  // Check if the color exists in colorNames, return \"Unknown\" if not found\n  return colorNames[lowercaseColor] || \"thisiswrong\";\n};\n\n\nfunction exportSVG() {\n  let prev = paper.view.zoom;\n  console.log(\"Exporting file as SVG\");\n  paper.view.zoom = 1;\n  paper.view.update();\n\n  // Store grid lines and invisible beads\n  const gridLines = paper.project.getItems({ name: \"gridLine\" });\n  const invisibleBeads = paper.project.getItems({ name: \"bead\", visible: false });\n\n  // Remove grid lines and invisible beads\n  gridLines.forEach(line => line.remove());\n  invisibleBeads.forEach(bead => bead.remove());\n\n  // Get all visible beads and group them by color\n  const visibleBeads = paper.project.getItems({ name: \"bead\", visible: true });\n  const beadsByColor = {};\n\n  visibleBeads.forEach(bead => {\n    const color = bead.fillColor.toCSS();\n    if (!beadsByColor[color]) {\n      beadsByColor[color] = [];\n    }\n    beadsByColor[color].push(bead);\n  });\n\n  // Create a combined SVG string for all beads\n  let combinedSVG = '';\n\n  Object.keys(beadsByColor).forEach(color => {\n    const beads = beadsByColor[color];\n\n    // Create a new temp layer\n    const tempLayer = new paper.Layer();\n\n    // Add beads of the current color to the temp layer\n    beads.forEach(bead => {\n      tempLayer.addChild(bead.clone());\n    });\n\n    // Export SVG from temp layer\n    combinedSVG += tempLayer.exportSVG({ asString: true, precision: 5 });\n\n    // Remove temp layer\n    tempLayer.remove();\n  });\n\n  // Restore grid lines and invisible beads\n  gridLines.forEach(line => paper.project.activeLayer.addChild(line));\n  invisibleBeads.forEach(bead => paper.project.activeLayer.addChild(bead));\n\n  // Reset zoom\n  paper.view.zoom = prev;\n\n  return combinedSVG;\n}\n\nexport { setupPaper, exportSVG, setTool , getColorName };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}