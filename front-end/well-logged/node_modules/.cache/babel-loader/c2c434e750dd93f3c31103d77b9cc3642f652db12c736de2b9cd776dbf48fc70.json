{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nconst createGrid = paper => {\n  console.log('Creating grid...');\n  const cellSize = 20;\n  const gridSizeX = paper.view.bounds.width;\n  const gridSizeY = paper.view.bounds.height;\n\n  // Loop through grid (size of paper) and place a small dot at each intersection\n  for (let y = 0; y <= gridSizeY; y += cellSize) {\n    for (let x = 0; x <= gridSizeX; x += cellSize) {\n      // Create a circle at each intersection\n      new paper.Path.Circle({\n        center: new paper.Point(x, y),\n        radius: 1.5,\n        fillColor: new paper.Color(0, 0, 0, 0.1),\n        name: 'gridDot'\n      });\n    }\n  }\n};\nconst createYarnLine = paper => {\n  const canvasWidth = paper.view.bounds.width;\n  const canvasHeight = paper.view.bounds.height;\n  const centerX = canvasWidth / 2; // Middle of the X-axis\n\n  const amplitude = 5; // Width of the wave\n  const frequency = 6; // Distance between peaks\n  const strokeColor = 'black';\n  const strokeWidth = 5;\n  const offSetY = 200;\n\n  // Initialize path for top yarn\n  const yarnPath1 = new paper.Path({\n    strokeColor: strokeColor,\n    strokeWidth: strokeWidth,\n    strokeCap: 'round'\n  });\n\n  // Use sin wave to create wavy pattern\n  for (let y = offSetY; y <= canvasHeight - offSetY; y += 2) {\n    const offsetX = Math.sin(y / frequency * Math.PI) * amplitude; // Wavy effect on X-axis\n    const point = new paper.Point(centerX + offsetX, y); // Y is linear\n    yarnPath1.add(point); // Add each point to the path\n  }\n  yarnPath1.smooth();\n\n  // Create the interlocked 'thread' to create depth\n  const yarnPath2 = new paper.Path({\n    strokeColor: new paper.Color(0, 0, 0, 0.7),\n    strokeWidth: strokeWidth,\n    strokeCap: 'round'\n  });\n  const phaseShift = Math.PI; // Phase shift of 180 degrees (π radians)\n  for (let y = offSetY; y <= canvasHeight - offSetY; y += 2) {\n    const offsetX = Math.sin(y / frequency * Math.PI + phaseShift) * amplitude;\n    const point = new paper.Point(centerX + offsetX, y);\n    yarnPath2.add(point);\n  }\n  yarnPath2.smooth();\n};\nconst CreateGridBG = ({\n  paper,\n  paperReady\n}) => {\n  _s();\n  useEffect(() => {\n    if (paperReady) {\n      createGrid(paper);\n      createYarnLine(paper);\n    }\n  }, [paperReady]);\n  return null;\n};\n_s(CreateGridBG, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CreateGridBG;\nexport { CreateGridBG };\nvar _c;\n$RefreshReg$(_c, \"CreateGridBG\");","map":{"version":3,"names":["useEffect","createGrid","paper","console","log","cellSize","gridSizeX","view","bounds","width","gridSizeY","height","y","x","Path","Circle","center","Point","radius","fillColor","Color","name","createYarnLine","canvasWidth","canvasHeight","centerX","amplitude","frequency","strokeColor","strokeWidth","offSetY","yarnPath1","strokeCap","offsetX","Math","sin","PI","point","add","smooth","yarnPath2","phaseShift","CreateGridBG","paperReady","_s","_c","$RefreshReg$"],"sources":["/Users/mariahjadegardner/UTA/FA24/Research/HackGeo/blockhead-1/ui/front-end/well-logged/src/interactions/CreateGridBG.jsx"],"sourcesContent":["import { useEffect } from 'react';\n\nconst createGrid = (paper) => {\n    console.log('Creating grid...');\n    const cellSize = 20;\n    const gridSizeX = paper.view.bounds.width;\n    const gridSizeY = paper.view.bounds.height;\n\n    // Loop through grid (size of paper) and place a small dot at each intersection\n    for (let y = 0; y <= gridSizeY; y += cellSize) {\n        for (let x = 0; x <= gridSizeX; x += cellSize) {\n            // Create a circle at each intersection\n            new paper.Path.Circle({\n            center: new paper.Point(x, y),\n            radius: 1.5,\n            fillColor: new paper.Color(0, 0, 0, 0.1),\n            name: 'gridDot',\n            });\n        }\n    }\n};\n\nconst createYarnLine = (paper) => {\n    const canvasWidth = paper.view.bounds.width;\n    const canvasHeight = paper.view.bounds.height;\n    const centerX = canvasWidth / 2; // Middle of the X-axis\n\n    const amplitude = 5;  // Width of the wave\n    const frequency = 6;  // Distance between peaks\n    const strokeColor = 'black';\n    const strokeWidth = 5;\n    const offSetY = 200;\n\n    // Initialize path for top yarn\n    const yarnPath1 = new paper.Path({\n        strokeColor: strokeColor,\n        strokeWidth: strokeWidth,\n        strokeCap: 'round'\n    });\n\n    // Use sin wave to create wavy pattern\n    for (let y = offSetY ; y <= canvasHeight - offSetY; y += 2) {\n        const offsetX = Math.sin(y / frequency * Math.PI) * amplitude; // Wavy effect on X-axis\n        const point = new paper.Point(centerX + offsetX, y); // Y is linear\n        yarnPath1.add(point);  // Add each point to the path\n    }\n\n    yarnPath1.smooth();  \n\n    // Create the interlocked 'thread' to create depth\n    const yarnPath2 = new paper.Path({\n        strokeColor: new paper.Color(0, 0, 0, 0.7),\n        strokeWidth: strokeWidth,\n        strokeCap: 'round'\n    });\n\n    const phaseShift = Math.PI; // Phase shift of 180 degrees (π radians)\n    for (let y = offSetY; y <= canvasHeight - offSetY; y += 2) {\n        const offsetX = Math.sin((y / frequency * Math.PI) + phaseShift) * amplitude;\n        const point = new paper.Point(centerX + offsetX, y);\n        yarnPath2.add(point);  \n    }\n\n    yarnPath2.smooth();  \n};\n\n\n\nconst CreateGridBG = ({ paper, paperReady }) => {\n    useEffect(() => {\n        if (paperReady) {\n            createGrid(paper);\n            createYarnLine(paper);\n        }\n    }, [paperReady]);\n\n    return null;\n};\n\nexport { CreateGridBG };\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}