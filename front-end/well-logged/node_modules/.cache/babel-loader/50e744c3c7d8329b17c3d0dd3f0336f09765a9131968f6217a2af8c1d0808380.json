{"ast":null,"code":"var _s = $RefreshSig$();\n// DirectManipulation.jsx\nimport { useEffect } from 'react';\nimport Ruler from '../javascripts/ruler.js';\nconst convertBeadParameters = parameters => {\n  return {\n    ...parameters,\n    outer_radius: Ruler.mm2pts(parameters.outer_radius),\n    inner_radius: Ruler.mm2pts(parameters.inner_radius),\n    beadSpacing: Ruler.mm2pts(parameters.beadSpacing)\n  };\n};\nconst createGrid = (paper, beadParameters) => {\n  const numCells = beadParameters.gridSize;\n  const beadSpacing = beadParameters.beadSpacing;\n  const cellSize = beadParameters.outer_radius * 2 + beadSpacing;\n  const gridSize = cellSize * numCells;\n  const centerX = paper.view.center.x;\n  const centerY = paper.view.center.y;\n  const startPointX = centerX - gridSize / 2;\n  const startPointY = centerY - gridSize / 2;\n  const startPoint = new paper.Point(startPointX, startPointY);\n  for (let i = 0; i <= numCells; i++) {\n    console.log(\". VERTICAL LINE\", i);\n    const y = startPoint.y + i * cellSize;\n    const start = new paper.Point(startPoint.x, y);\n    const end = new paper.Point(startPoint.x + gridSize, y);\n    new paper.Path.Line({\n      from: start,\n      to: end,\n      strokeColor: new paper.Color(0, 0, 0, 0.2),\n      strokeWidth: .5,\n      name: 'gridLine'\n    });\n  }\n  for (let j = 0; j <= numCells; j++) {\n    const x = startPoint.x + j * cellSize;\n    const start = new paper.Point(x, startPoint.y);\n    const end = new paper.Point(x, startPoint.y + gridSize);\n    new paper.Path.Line({\n      from: start,\n      to: end,\n      strokeColor: new paper.Color(0, 0, 0, 0.2),\n      strokeWidth: .5,\n      name: 'gridLine'\n    });\n  }\n  for (let i = 0; i < numCells; i++) {\n    for (let j = 0; j < numCells; j++) {\n      const cellCenterX = startPointX + i * cellSize + cellSize / 2;\n      const cellCenterY = startPointY + j * cellSize + cellSize / 2;\n      const bead = createPerlerBead(paper, new paper.Point(cellCenterX, cellCenterY), beadParameters);\n      bead.visible = true;\n      bead.name = 'bead';\n    }\n  }\n};\nconst createCircularGrid = (paper, beadParameters) => {\n  const numCells = beadParameters.gridSize;\n  const beadSpacing = beadParameters.beadSpacing;\n  const cellSize = beadParameters.outer_radius * 2 + beadSpacing;\n  const gridSize = cellSize * numCells;\n  const centerX = paper.view.center.x;\n  const centerY = paper.view.center.y;\n  const centerPoint = new paper.Point(centerX, centerY);\n  for (let radius = cellSize; radius < gridSize; radius += cellSize) {\n    const numBeads = Math.floor(2 * Math.PI * radius / cellSize);\n    for (let i = 0; i < numBeads; i++) {\n      const angle = i * 360 / numBeads;\n      const beadCenter = centerPoint.add(new paper.Point({\n        length: radius,\n        angle: angle\n      }));\n      const bead = createPerlerBead(paper, beadCenter, beadParameters);\n      bead.visible = true;\n      bead.name = 'bead';\n    }\n  }\n  for (let radius = cellSize / 2; radius < gridSize; radius += cellSize) {\n    new paper.Path.Circle({\n      center: centerPoint,\n      radius: radius,\n      strokeColor: new paper.Color(0, 0, 0, 0.2),\n      strokeWidth: .5,\n      name: 'gridLine'\n    });\n  }\n  const centerBead = createPerlerBead(paper, centerPoint, beadParameters);\n  centerBead.visible = true;\n  centerBead.name = 'bead';\n};\nconst createHexagonalGrid = (paper, beadParameters) => {\n  const numCells = beadParameters.gridSize;\n  const beadSpacing = beadParameters.beadSpacing;\n  const cellSize = beadParameters.outer_radius * 2 + beadSpacing;\n  const gridSize = cellSize * numCells;\n  const centerX = paper.view.center.x;\n  const centerY = paper.view.center.y;\n  const hexRadius = gridSize / 2;\n  const isPointInHexagon = (point, radius) => {\n    const dx = Math.abs(point.x - centerX);\n    const dy = Math.abs(point.y - centerY);\n    if (dx > radius * Math.sqrt(3) / 2 || dy > radius) return false;\n    return radius * Math.sqrt(3) / 2 - dx / 2 >= dy;\n  };\n  for (let q = -numCells; q <= numCells; q++) {\n    for (let r = -numCells; r <= numCells; r++) {\n      const x = centerX + (Math.sqrt(3) * q + Math.sqrt(3) / 2 * r) * (cellSize / 2);\n      const y = centerY + 3 / 2 * r * (cellSize / 2);\n      const point = new paper.Point(x, y);\n      if (isPointInHexagon(point, hexRadius)) {\n        const hex = new paper.Path.RegularPolygon(point, 6, beadParameters.outer_radius + beadSpacing / 2);\n        hex.strokeColor = new paper.Color(0, 0, 0, 0.2);\n        hex.strokeWidth = .5;\n        hex.name = 'gridLine';\n        const bead = createPerlerBead(paper, point, beadParameters);\n        bead.visible = true;\n        bead.name = 'bead';\n      }\n    }\n  }\n};\nconst createPerlerBead = (paper, point, beadParameters) => {\n  const outerCircle = new paper.Path.Circle({\n    center: point,\n    radius: beadParameters.outer_radius,\n    fillColor: beadParameters.fillColor\n  });\n  const innerCircle = new paper.Path.Circle({\n    center: point,\n    radius: beadParameters.inner_radius,\n    fillColor: beadParameters.fillColor\n  });\n  const bead = outerCircle.subtract(innerCircle);\n  outerCircle.remove();\n  innerCircle.remove();\n  return bead;\n};\nconst DirectManipulation = ({\n  paper,\n  paperReady,\n  selectedColor,\n  beadParametersMM,\n  gridVisible\n}) => {\n  _s();\n  useEffect(() => {\n    if (paperReady && beadParametersMM) {\n      console.log(\"Loading FuseBlock\");\n      const paper = paperReady;\n      paper.project.clear();\n      paper.view.zoom = 10;\n      const beadParameters = convertBeadParameters(beadParametersMM);\n      const createGridType = beadParameters.createGridType;\n      switch (createGridType) {\n        case 'circular':\n          createCircularGrid(paper, beadParameters);\n          break;\n        case 'hexagonal':\n          createHexagonalGrid(paper, beadParameters);\n          break;\n        case 'grid':\n          console.log(\"GRID\", beadParameters);\n          createGrid(paper, beadParameters);\n          break;\n        default:\n          console.log(\"DEFAULT\", beadParameters);\n          createGrid(paper, beadParameters);\n          break;\n      }\n    }\n  }, [paperReady, beadParametersMM]);\n  useEffect(() => {\n    if (paperReady) {\n      paperReady.tools.forEach(tool => {\n        tool.setColor(selectedColor);\n      });\n    }\n  }, [paperReady, selectedColor]);\n  useEffect(() => {\n    if (paperReady) {\n      const paper = paperReady;\n      paper.project.activeLayer.children.forEach(item => {\n        if (item.name === \"gridLine\") {\n          item.opacity = gridVisible;\n        }\n      });\n    }\n  }, [paperReady, gridVisible]);\n  return null;\n};\n_s(DirectManipulation, \"ewq31d5h+FnD/qJW52w5UqeNMN4=\");\n_c = DirectManipulation;\nexport { DirectManipulation, createGrid, createCircularGrid, createHexagonalGrid };\nvar _c;\n$RefreshReg$(_c, \"DirectManipulation\");","map":{"version":3,"names":["useEffect","Ruler","convertBeadParameters","parameters","outer_radius","mm2pts","inner_radius","beadSpacing","createGrid","paper","beadParameters","numCells","gridSize","cellSize","centerX","view","center","x","centerY","y","startPointX","startPointY","startPoint","Point","i","console","log","start","end","Path","Line","from","to","strokeColor","Color","strokeWidth","name","j","cellCenterX","cellCenterY","bead","createPerlerBead","visible","createCircularGrid","centerPoint","radius","numBeads","Math","floor","PI","angle","beadCenter","add","length","Circle","centerBead","createHexagonalGrid","hexRadius","isPointInHexagon","point","dx","abs","dy","sqrt","q","r","hex","RegularPolygon","outerCircle","fillColor","innerCircle","subtract","remove","DirectManipulation","paperReady","selectedColor","beadParametersMM","gridVisible","_s","project","clear","zoom","createGridType","tools","forEach","tool","setColor","activeLayer","children","item","opacity","_c","$RefreshReg$"],"sources":["/Users/mariahjadegardner/UTA/FA24/Research/string-theory/react-coloring/src/interactions/DirectManipulation.jsx"],"sourcesContent":["// DirectManipulation.jsx\nimport { useEffect } from 'react';\nimport Ruler from '../javascripts/ruler.js';\n\n\nconst convertBeadParameters = (parameters) => {\n  return {...parameters, \n    outer_radius: Ruler.mm2pts(parameters.outer_radius), \n    inner_radius: Ruler.mm2pts(parameters.inner_radius), \n    beadSpacing: Ruler.mm2pts(parameters.beadSpacing)\n  };\n};\n\nconst createGrid = (paper, beadParameters) => {  \n  const numCells = beadParameters.gridSize;\n  const beadSpacing = beadParameters.beadSpacing;\n  const cellSize = beadParameters.outer_radius * 2 + beadSpacing;\n  const gridSize = cellSize * numCells;\n\n  const centerX = paper.view.center.x;\n  const centerY = paper.view.center.y;\n  const startPointX = centerX - (gridSize / 2);\n  const startPointY = centerY - (gridSize / 2);\n  const startPoint = new paper.Point(startPointX, startPointY);\n\n  for (let i = 0; i <= numCells; i++) {\n    console.log(\". VERTICAL LINE\", i);\n    const y = startPoint.y + i * cellSize;\n    const start = new paper.Point(startPoint.x, y);\n    const end = new paper.Point(startPoint.x + gridSize, y);\n    new paper.Path.Line({\n      from: start,\n      to: end,\n      strokeColor: new paper.Color(0, 0, 0, 0.2),\n      strokeWidth: .5,\n      name: 'gridLine'\n    });\n  }\n\n  for (let j = 0; j <= numCells; j++) {\n    const x = startPoint.x + j * cellSize;\n    const start = new paper.Point(x, startPoint.y);\n    const end = new paper.Point(x, startPoint.y + gridSize);\n    new paper.Path.Line({\n      from: start,\n      to: end,\n      strokeColor: new paper.Color(0, 0, 0, 0.2),\n      strokeWidth: .5,\n      name: 'gridLine'\n    });\n  }\n\n  for (let i = 0; i < numCells; i++) {\n    for (let j = 0; j < numCells; j++) {\n      const cellCenterX = startPointX + (i * cellSize) + (cellSize / 2);\n      const cellCenterY = startPointY + (j * cellSize) + (cellSize / 2);\n      const bead = createPerlerBead(paper, new paper.Point(cellCenterX, cellCenterY), beadParameters);\n      bead.visible = true;\n      bead.name = 'bead';\n    }\n  }\n};\n\nconst createCircularGrid = (paper, beadParameters) => {\n  const numCells = beadParameters.gridSize;\n  const beadSpacing = beadParameters.beadSpacing;\n  const cellSize = beadParameters.outer_radius * 2 + beadSpacing;\n  const gridSize = cellSize * numCells;\n\n  const centerX = paper.view.center.x;\n  const centerY = paper.view.center.y;\n  const centerPoint = new paper.Point(centerX, centerY);\n\n  for (let radius = cellSize; radius < gridSize; radius += cellSize) {\n    const numBeads = Math.floor(2 * Math.PI * radius / cellSize);\n    for (let i = 0; i < numBeads; i++) {\n      const angle = (i * 360) / numBeads;\n      const beadCenter = centerPoint.add(new paper.Point({\n        length: radius,\n        angle: angle\n      }));\n      const bead = createPerlerBead(paper, beadCenter, beadParameters);\n      bead.visible = true;\n      bead.name = 'bead';\n    }\n  }\n  for (let radius = cellSize/2; radius < gridSize; radius += cellSize) {\n    new paper.Path.Circle({\n      center: centerPoint,\n      radius: radius,\n      strokeColor: new paper.Color(0, 0, 0, 0.2),\n      strokeWidth: .5,\n      name: 'gridLine'\n    });\n  }\n\n  const centerBead = createPerlerBead(paper, centerPoint, beadParameters);\n  centerBead.visible = true;\n  centerBead.name = 'bead';\n};\n\n\nconst createHexagonalGrid = (paper, beadParameters) => {\n  const numCells = beadParameters.gridSize;\n  const beadSpacing = beadParameters.beadSpacing;\n  const cellSize = beadParameters.outer_radius * 2 + beadSpacing;\n  const gridSize = cellSize * numCells;\n\n  const centerX = paper.view.center.x;\n  const centerY = paper.view.center.y;\n  const hexRadius = gridSize / 2;\n\n  const isPointInHexagon = (point, radius) => {\n    const dx = Math.abs(point.x - centerX);\n    const dy = Math.abs(point.y - centerY);\n    if (dx > radius * Math.sqrt(3) / 2 || dy > radius) return false;\n    return radius * Math.sqrt(3) / 2 - dx / 2 >= dy;\n  };\n\n  for (let q = -numCells; q <= numCells; q++) {\n    for (let r = -numCells; r <= numCells; r++) {\n      const x = centerX + (Math.sqrt(3) * q + Math.sqrt(3) / 2 * r) * (cellSize / 2);\n      const y = centerY + (3 / 2 * r) * (cellSize / 2);\n      const point = new paper.Point(x, y);\n      if (isPointInHexagon(point, hexRadius)) {\n        const hex = new paper.Path.RegularPolygon(point, 6, beadParameters.outer_radius + beadSpacing / 2);\n        hex.strokeColor = new paper.Color(0, 0, 0, 0.2);\n        hex.strokeWidth = .5;\n        hex.name = 'gridLine';\n        const bead = createPerlerBead(paper, point, beadParameters);\n        bead.visible = true;\n        bead.name = 'bead';\n      }\n    }\n  }\n};\n\nconst createPerlerBead = (paper, point, beadParameters) => {\n\n  const outerCircle = new paper.Path.Circle({\n    center: point,\n    radius: beadParameters.outer_radius,\n    fillColor: beadParameters.fillColor\n  });\n\n  const innerCircle = new paper.Path.Circle({\n    center: point,\n    radius: beadParameters.inner_radius,\n    fillColor: beadParameters.fillColor\n  });\n\n  const bead = outerCircle.subtract(innerCircle);\n\n  outerCircle.remove();\n  innerCircle.remove();\n\n  return bead;\n};\n\n\nconst DirectManipulation = ({ paper, paperReady, selectedColor, beadParametersMM, gridVisible }) => {\n  useEffect(() => {\n    if (paperReady && beadParametersMM) {\n      console.log(\"Loading FuseBlock\")\n      const paper = paperReady;\n      paper.project.clear();\n      paper.view.zoom = 10;\n      \n      const beadParameters = convertBeadParameters(beadParametersMM);\n      const createGridType = beadParameters.createGridType;\n      \n      switch (createGridType) {\n        case 'circular':\n          createCircularGrid(paper, beadParameters);\n          break;\n        case 'hexagonal':\n          createHexagonalGrid(paper, beadParameters);\n          break;\n        case 'grid':\n          console.log(\"GRID\", beadParameters);\n          createGrid(paper, beadParameters);\n          break;\n        default:\n          console.log(\"DEFAULT\", beadParameters);\n          createGrid(paper, beadParameters);\n          break;\n      }\n    }\n  }, [paperReady, beadParametersMM]);\n\n  \n\n  useEffect(() => {\n    if(paperReady){\n      paperReady.tools.forEach(tool => {\n        tool.setColor(selectedColor);\n      });\n    }\n   \n  }, [paperReady, selectedColor]);\n\n  useEffect(() => {\n    if (paperReady) {\n      const paper = paperReady;\n      paper.project.activeLayer.children.forEach(item => {\n        if (item.name === \"gridLine\") {\n          item.opacity = gridVisible;\n        }\n      });\n    }\n  }, [paperReady, gridVisible])\n\n  return null;\n};\n\nexport { DirectManipulation, createGrid, createCircularGrid, createHexagonalGrid };\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}