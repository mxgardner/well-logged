{"ast":null,"code":"import paper from 'paper';\nconst fillTool = selectedColor => {\n  const tool = new paper.Tool();\n  let dragging = false;\n  let startRect;\n  let area = null;\n  tool.name = 'fillTool';\n  tool.color = selectedColor;\n  tool.setColor = function (color) {\n    this.color = color;\n  };\n  tool.onMouseDown = function (event) {\n    startRect = new paper.Rectangle(event.point, new paper.Size(0, 0));\n    dragging = true;\n  };\n  tool.onMouseDrag = function (event) {\n    if (!dragging) {\n      startRect = event;\n      dragging = true;\n    }\n\n    // Remove previous area\n    if (area) {\n      area.remove();\n    }\n\n    // Create new area\n    const rect = new paper.Rectangle(startRect.point, event.point);\n    area = new paper.Path.Rectangle(rect);\n    area.strokeColor = 'black';\n    area.fillColor = null;\n    area.dashArray = [5, 5];\n  };\n  tool.onMouseUp = function (event) {\n    const color = this.color;\n    if (dragging) {\n      dragging = false;\n\n      // Get all beads within the selected area and toggle their visibility\n      const rect = new paper.Rectangle(startRect.point, event.point);\n      paper.project.getItems({\n        name: 'bead'\n      }).forEach(bead => {\n        if (rect.contains(bead.position)) {\n          if (bead.visible) {\n            bead.visible = false;\n          } else {\n            bead.fillColor = color;\n            bead.visible = true;\n          }\n        }\n      });\n\n      // Remove the selection rectangle\n      if (area) {\n        area.remove();\n      }\n      dragging = false;\n      startRect = null;\n      area = null;\n    }\n  };\n  return tool;\n};\nexport { fillTool };","map":{"version":3,"names":["paper","fillTool","selectedColor","tool","Tool","dragging","startRect","area","name","color","setColor","onMouseDown","event","Rectangle","point","Size","onMouseDrag","remove","rect","Path","strokeColor","fillColor","dashArray","onMouseUp","project","getItems","forEach","bead","contains","position","visible"],"sources":["/Users/mariahjadegardner/UTA/FA24/Research/string-theory/react-coloring/src/interactions/FillTool.jsx"],"sourcesContent":["import paper from 'paper';\n\nconst fillTool = (selectedColor) => {\n    const tool = new paper.Tool();\n    let dragging = false;\n    let startRect;\n    let area = null;\n    tool.name = 'fillTool';\n    tool.color = selectedColor;\n    tool.setColor = function (color) {\n        this.color = color;\n    }\n    tool.onMouseDown = function (event) {\n        startRect = new paper.Rectangle(event.point, new paper.Size(0, 0));\n        dragging = true;\n    };\n\n    tool.onMouseDrag = function(event) {\n        if (!dragging) {\n            startRect = event;\n            dragging = true;\n        }\n    \n        // Remove previous area\n        if (area) {\n            area.remove();\n        }\n    \n        // Create new area\n        const rect = new paper.Rectangle(startRect.point, event.point);\n        area = new paper.Path.Rectangle(rect);\n        area.strokeColor = 'black';\n        area.fillColor = null;\n        area.dashArray = [5, 5];\n    };\n\n    tool.onMouseUp = function (event) {\n        const color = this.color;\n        if (dragging) {\n            dragging = false;\n\n            // Get all beads within the selected area and toggle their visibility\n            const rect = new paper.Rectangle(startRect.point, event.point);\n            paper.project.getItems({ name: 'bead' }).forEach(bead => {\n                if (rect.contains(bead.position)) {\n                    if (bead.visible) {\n                        bead.visible = false;\n                    } else {\n                        bead.fillColor = color;\n                        bead.visible = true;\n                    }\n                }\n            });\n\n            // Remove the selection rectangle\n            if (area) {\n                area.remove();\n            }\n\n            dragging = false;\n            startRect = null;\n            area = null;\n        }\n    };\n\n    return tool;\n};\n\nexport {fillTool};\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAIC,aAAa,IAAK;EAChC,MAAMC,IAAI,GAAG,IAAIH,KAAK,CAACI,IAAI,CAAC,CAAC;EAC7B,IAAIC,QAAQ,GAAG,KAAK;EACpB,IAAIC,SAAS;EACb,IAAIC,IAAI,GAAG,IAAI;EACfJ,IAAI,CAACK,IAAI,GAAG,UAAU;EACtBL,IAAI,CAACM,KAAK,GAAGP,aAAa;EAC1BC,IAAI,CAACO,QAAQ,GAAG,UAAUD,KAAK,EAAE;IAC7B,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB,CAAC;EACDN,IAAI,CAACQ,WAAW,GAAG,UAAUC,KAAK,EAAE;IAChCN,SAAS,GAAG,IAAIN,KAAK,CAACa,SAAS,CAACD,KAAK,CAACE,KAAK,EAAE,IAAId,KAAK,CAACe,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClEV,QAAQ,GAAG,IAAI;EACnB,CAAC;EAEDF,IAAI,CAACa,WAAW,GAAG,UAASJ,KAAK,EAAE;IAC/B,IAAI,CAACP,QAAQ,EAAE;MACXC,SAAS,GAAGM,KAAK;MACjBP,QAAQ,GAAG,IAAI;IACnB;;IAEA;IACA,IAAIE,IAAI,EAAE;MACNA,IAAI,CAACU,MAAM,CAAC,CAAC;IACjB;;IAEA;IACA,MAAMC,IAAI,GAAG,IAAIlB,KAAK,CAACa,SAAS,CAACP,SAAS,CAACQ,KAAK,EAAEF,KAAK,CAACE,KAAK,CAAC;IAC9DP,IAAI,GAAG,IAAIP,KAAK,CAACmB,IAAI,CAACN,SAAS,CAACK,IAAI,CAAC;IACrCX,IAAI,CAACa,WAAW,GAAG,OAAO;IAC1Bb,IAAI,CAACc,SAAS,GAAG,IAAI;IACrBd,IAAI,CAACe,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAC3B,CAAC;EAEDnB,IAAI,CAACoB,SAAS,GAAG,UAAUX,KAAK,EAAE;IAC9B,MAAMH,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAIJ,QAAQ,EAAE;MACVA,QAAQ,GAAG,KAAK;;MAEhB;MACA,MAAMa,IAAI,GAAG,IAAIlB,KAAK,CAACa,SAAS,CAACP,SAAS,CAACQ,KAAK,EAAEF,KAAK,CAACE,KAAK,CAAC;MAC9Dd,KAAK,CAACwB,OAAO,CAACC,QAAQ,CAAC;QAAEjB,IAAI,EAAE;MAAO,CAAC,CAAC,CAACkB,OAAO,CAACC,IAAI,IAAI;QACrD,IAAIT,IAAI,CAACU,QAAQ,CAACD,IAAI,CAACE,QAAQ,CAAC,EAAE;UAC9B,IAAIF,IAAI,CAACG,OAAO,EAAE;YACdH,IAAI,CAACG,OAAO,GAAG,KAAK;UACxB,CAAC,MAAM;YACHH,IAAI,CAACN,SAAS,GAAGZ,KAAK;YACtBkB,IAAI,CAACG,OAAO,GAAG,IAAI;UACvB;QACJ;MACJ,CAAC,CAAC;;MAEF;MACA,IAAIvB,IAAI,EAAE;QACNA,IAAI,CAACU,MAAM,CAAC,CAAC;MACjB;MAEAZ,QAAQ,GAAG,KAAK;MAChBC,SAAS,GAAG,IAAI;MAChBC,IAAI,GAAG,IAAI;IACf;EACJ,CAAC;EAED,OAAOJ,IAAI;AACf,CAAC;AAED,SAAQF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}